//! Functions related to the transactions validation and manipulation.


use bdk::bitcoin::{
    Transaction,
    consensus::encode::deserialize,
};
use bdk::blockchain::{ElectrumBlockchain, GetTx};
use bdk::electrum_client::{Client, ElectrumApi};
use hex::decode as hex_decode;

pub fn previous_utxo_spent(tx: &Transaction) -> bool {
    // Validates that the utxo pointed to by the transaction input has not been spent.

    println!("Connecting to the node");
    // Connect to Electrum node
    let client = Client::new("umbrel.local:50001").unwrap();
    let blockchain = ElectrumBlockchain::from(client);
    println!("Connected to the node");


    let outpoint = tx.input[0].previous_output;
    let tx_result = blockchain.get_tx(&outpoint.txid);

    match tx_result {
        Ok(Some(tx)) => {
            // validate if the output has been spent
            //let spent = tx.output[outpoint.vout as usize].script_pubkey.is_provably_unspendable();
            println!("I'm here");
            let utxo_script_pubkey = &tx.output[outpoint.vout as usize].script_pubkey;
            let utxo_list = blockchain.script_list_unspent(&utxo_script_pubkey);
            println!("I'm also here");
            match utxo_list {
                Ok(returned_utxo_list) => {
                    if returned_utxo_list.len() > 0 {
                        println!("Transaction available");
                        return true;
                    }
                    else {
                        println!("Transaction already spent");
                        return false;
                    }
                },
                Err(_e) => {
                    println!("Error querying for the UTXO");
                    return false;
                }
            }
        },
        Ok(None) => {
            print!("Petition succeed but no tx was returned");
            return false;
        },
        Err(_e) => {
            println!("Could not retrieve previous transaction");
            return false;
        }
    }

}

pub fn get_num_inputs_and_outputs(tx: &Transaction) -> (usize, usize) {
    // Return the number of inputs and outputs from a given transaction in a tuple
    return (tx.input.len(), tx.output.len());
}

pub fn validate_tx_query(_min_fee_rate: f32, tx_hex: &str ) -> bool {
    // Validate that a given transaction (in hex) is valid according to the rules.
    // Rules:
    //  - Should only be 1 input.
    //  - Should only be 1 output.
    //  - The input cannot be spent before must be and UTXO.

    println!("Deselializing");
    let tx: Transaction = deserialize(&hex_decode(tx_hex).unwrap()).unwrap();


    // Only one input
    if get_num_inputs_and_outputs(&tx) != (1,1) {
        println!("Number of inputs and outputs must be 1");
        return false;
    }

    // Output not spent
    return previous_utxo_spent(&tx);



    //return true;

}




#[cfg(test)]

mod tests {

    use crate::utils::transactions;
    
    #[test]
    fn test_validate_tx_query_utxo_already_spent() {
        let fee_rate: f32 = 10.0;
    
        //tx should be rejected as the input is already spent
        //tx id: d11251712c854dea5a05aed75c6d9d81aa3a51088d8031c5ecaa28afd2b277d5
        let tx_hex = "0100000000010109abff3c9bd88810da1dc5583e82834b612364c074799bfbbd1750bd29858888000000000001000000010f2700000000000022512039112e42819fe026c6c1406fa5c06646435ae2669bdc5b874234f72215c489fc03409ce5d98d03b32abc4af7dcc473811ff93e4f4e88e8ac0cf4b86831f491849f3db17fb916e732d9a84bc249a787d7a2c88dda6c0e5581faed9bd49b305a0ecb976d206af366cc2af6b6068e737543a26044363897cd492d58fc7055bdeb8eb494873dac00630461746f6d03646d743ea16461726773a46474696d651a65b9e44c656e6f6e6365190c9868626974776f726b636538383838386b6d696e745f7469636b657268696e66696e6974796821c16af366cc2af6b6068e737543a26044363897cd492d58fc7055bdeb8eb494873d00000000";
        assert_eq!(transactions::validate_tx_query(fee_rate, tx_hex), false);
    }

    #[test]
    fn validate_tx_query_2_outputs() {
        let fee_rate: f32 = 10.0;

        //tx should be rejected because has 2 outputs
        //tx id: 3cbcf427d8f56dc4fe886b60324d4fa29387636705445dbaf6aa68629b0a46fe
        let tx_hex = "01000000000101f447a5f50615c2dccbe3d7cca44da2070a130af8a3a1d5cc305ce5548d108f7f0100000000ffffffff02972c0a00000000001976a914cf3f317c74a73afc94ac53bcebe21f42ff84731e88ac4443134b000000001600140d7b4a861b7158a10772bb04aeeb25ff9c8b393802483045022100ebe79839ebca5a467f02070c6873f89e903c308ca4b1c360f54b99a4bb4b7b5002201506e5b586dd2c2901a229301f256eaf765045c252a15d5cd3b2dd9b8b16c7fd0121024b0463b084e8db9b90d9af135ed6f7e6601caea1598a1271ee946454ac934c0c00000000";
        assert_eq!(transactions::validate_tx_query(fee_rate, tx_hex),false);
    }

    #[test]
    fn validate_tx_query_2_inputs() {
        let fee_rate: f32 = 10.0;

        //tx should be rejected because has 25 inputs
        //tx id: 674ababade440d16e474f3ee21485461bdcfbcc43b665544b9fa8ef54eb86f7e
        let tx_hex = "";
        assert_eq!(transactions::validate_tx_query(fee_rate, tx_hex), false);
    }

    /* #[test]
    fn validate_tx_query_valid_tx() {
        let fee_rate: f32 = 10.0;

        //tx should be accepted because the utxo has not been spent and has 1 in 1 out
        //this was tested with a mainnet transaction and worked correctly. The tx was deleted due to possible lose of real funds.
        let tx_hex = "";
        assert_eq!(transactions::validate_tx_query(fee_rate, tx_hex), true);
    }
    */


}